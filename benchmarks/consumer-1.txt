# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit Server VM, 25.221-b11
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_221.jdk/Contents/Home/jre/bin/java
# VM options: <none>
# Warmup: 1 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: monix.kafka.benchmarks.ConsumerBenchmark.monix_auto_commit

# Run progress: 0.00% complete, ETA 00:07:20
# Fork: 1 of 1
# Warmup Iteration   1: 9.643 ops/s
Iteration   1: 13.072 ops/s
Iteration   2: 12.147 ops/s
Iteration   3: 11.022 ops/s
Iteration   4: 8.540 ops/s
Iteration   5: 9.754 ops/s
Iteration   6: 10.663 ops/s
Iteration   7: 11.656 ops/s
Iteration   8: 12.694 ops/s
Iteration   9: 11.146 ops/s
Iteration  10: 11.898 ops/s


Result "monix.kafka.benchmarks.ConsumerBenchmark.monix_auto_commit":
  11.259 ±(99.9%) 2.065 ops/s [Average]
  (min, avg, max) = (8.540, 11.259, 13.072), stdev = 1.366
  CI (99.9%): [9.195, 13.324] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit Server VM, 25.221-b11
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_221.jdk/Contents/Home/jre/bin/java
# VM options: <none>
# Warmup: 1 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: monix.kafka.benchmarks.ConsumerBenchmark.monix_manual_commit

# Run progress: 25.00% complete, ETA 00:06:06
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.NoSuchMethodError: monix.kafka.benchmarks.generated.ConsumerBenchmark_jmhType.monix_manual_commit()V
	at monix.kafka.benchmarks.generated.ConsumerBenchmark_monix_manual_commit_jmhTest.monix_manual_commit_thrpt_jmhStub(ConsumerBenchmark_monix_manual_commit_jmhTest.java:119)
	at monix.kafka.benchmarks.generated.ConsumerBenchmark_monix_manual_commit_jmhTest.monix_manual_commit_Throughput(ConsumerBenchmark_monix_manual_commit_jmhTest.java:83)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)




# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit Server VM, 25.221-b11
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_221.jdk/Contents/Home/jre/bin/java
# VM options: <none>
# Warmup: 1 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: monix.kafka.benchmarks.ConsumerBenchmark.monix_manual_commit_heartbeat1

# Run progress: 50.00% complete, ETA 00:02:13
# Fork: 1 of 1
# Warmup Iteration   1: 7.288 ops/s
Iteration   1: 9.133 ops/s
Iteration   2: 9.689 ops/s
Iteration   3: 10.091 ops/s
Iteration   4: 10.151 ops/s
Iteration   5: 10.438 ops/s
Iteration   6: 10.438 ops/s
Iteration   7: 10.539 ops/s
Iteration   8: 10.347 ops/s
Iteration   9: 8.787 ops/s
Iteration  10: 9.061 ops/s


Result "monix.kafka.benchmarks.ConsumerBenchmark.monix_manual_commit_heartbeat1":
  9.867 ±(99.9%) 0.989 ops/s [Average]
  (min, avg, max) = (8.787, 9.867, 10.539), stdev = 0.654
  CI (99.9%): [8.878, 10.856] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_221, Java HotSpot(TM) 64-Bit Server VM, 25.221-b11
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_221.jdk/Contents/Home/jre/bin/java
# VM options: <none>
# Warmup: 1 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: monix.kafka.benchmarks.ConsumerBenchmark.monix_manual_commit_heartbeat1000

# Run progress: 75.00% complete, ETA 00:01:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.980 ops/s
Iteration   1: 0.991 ops/s
Iteration   2: 0.991 ops/s
Iteration   3: 0.993 ops/s
Iteration   4: 0.993 ops/s
Iteration   5: 0.993 ops/s
Iteration   6: 0.993 ops/s
Iteration   7: 0.994 ops/s
Iteration   8: 0.994 ops/s
Iteration   9: 0.994 ops/s
Iteration  10: 0.994 ops/s


Result "monix.kafka.benchmarks.ConsumerBenchmark.monix_manual_commit_heartbeat1000":
  0.993 ±(99.9%) 0.002 ops/s [Average]
  (min, avg, max) = (0.991, 0.993, 0.994), stdev = 0.001
  CI (99.9%): [0.991, 0.995] (assumes normal distribution)


# Run complete. Total time: 00:06:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt   Score   Error  Units
ConsumerBenchmark.monix_auto_commit                  thrpt   10  11.259 ± 2.065  ops/s
ConsumerBenchmark.monix_manual_commit_heartbeat1     thrpt   10   9.867 ± 0.989  ops/s
ConsumerBenchmark.monix_manual_commit_heartbeat1000  thrpt   10   0.993 ± 0.002  ops/s
